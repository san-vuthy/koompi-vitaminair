{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/sovanden/projects/vitaminair.org/va-site/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sovanden/projects/vitaminair.org/va-site/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/sovanden/projects/vitaminair.org/va-site/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/sovanden/projects/vitaminair.org/va-site/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/sovanden/projects/vitaminair.org/va-site/pages/home/inforForm.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import React, { useState } from \"react\";\n// import {\n//   Divider,\n//   Row,\n//   Col,\n//   Button,\n//   Input,\n//   Form,\n//   Checkbox,\n//   Select,\n//   Radio,\n//   message,\n// } from \"antd\";\n// // import styles from \"../../styles/Home.module.css\";\n// // import { DONATE_TREES } from \"../../graphql/mutaion\";\n// // import { GET_DONATIONS, GET_MOST_DONATIONS } from \"../../graphql/query\";\n// // import { useQuery, useMutation } from \"@apollo/client\";\n// function InfoForm() {\n//   const [current, setCurrent] = useState(0);\n//   //   const [donation] = useMutation(DONATE_TREES);\n//   //   const { refetch } = useQuery(GET_DONATIONS);\n//   const [loading, setLoading] = useState(false);\n//   //   const { refetch: refetchMostDonation } = useQuery(GET_MOST_DONATIONS);\n//   const [form] = Form.useForm();\n//   const next = (e) => {\n//     e.preventDefault();\n//     setCurrent(current + 1);\n//   };\n//   //go to prev step in form\n//   const prev = (e) => {\n//     e.preventDefault();\n//     setCurrent(current - 1);\n//   };\n//   //form\n//   const layout = {\n//     labelCol: {\n//       span: 24,\n//     },\n//     wrapperCol: {\n//       span: 24,\n//     },\n//   };\n//   const tailLayout = {\n//     wrapperCol: {\n//       span: 24,\n//     },\n//   };\n//   const onFinish = (values) => {\n//     // const { tree } = values;\n//     // donation({\n//     //   variables: {\n//     //     ...values,\n//     //     // user_message: user_message === undefined ? \"\" : user_message,\n//     //     // phone: phone === undefined ? \"No\" : phone,\n//     //     tree: parseInt(tree),\n//     //   },\n//     // }).then(async (res) => {\n//     //   setLoading(true);\n//     //   message.success(\"Donation Successful\");\n//     //   await refetch();\n//     //   await refetchMostDonation();\n//     //   form.resetFields();\n//     //   setLoading(false);\n//     // });\n//     console.log(values);\n//   };\n//   const onFinishFailed = (errorInfo) => {\n//     console.log(\"Failed:\", errorInfo);\n//   };\n//   //form steps\n//   const Step1Form = () => {\n//     return (\n//       <>\n//         <div>\n//           <center>\n//             <h2>JOIN VitaminAir</h2>\n//             <p className=\"join-desc\">\n//               Join VitaminAir to Plant trees and Educate the next generation.\n//             </p>\n//           </center>\n//           <Row gutter={[12, 12]}>\n//             <Col span={12}>\n//               {/* <Button\n//                   onChange={(e) => setValue(e.target.value)}\n//                   className=\"tree-amount\"\n//                   onClick={amountActive}\n//                 >\n//                   10,000 riel\n//                 </Button> */}\n//               <Form.Item name=\"tree\">\n//                 <Radio.Group>\n//                   <Radio.Button className=\"radio-button\" value={5}>\n//                     <span className=\"text-radio-button\">5 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//             <Col span={12}>\n//               {/* <Button className=\"tree-amount amount-active\" onClick={amountActive}>\n//                 20,000 riel\n//               </Button> */}\n//               <Form.Item name=\"tree\" initialValue={20}>\n//                 <Radio.Group defaultValue={20}>\n//                   <Radio.Button className=\"radio-button\" value={20}>\n//                     <span className=\"text-radio-button\">20 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//             <Col span={12}>\n//               {/* <Button className=\"tree-amount\" onClick={amountActive}>\n//                 30,000 riel\n//               </Button> */}\n//               <Form.Item name=\"tree\">\n//                 <Radio.Group>\n//                   <Radio.Button className=\"radio-button\" value={50}>\n//                     <span className=\"text-radio-button\">50 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//             <Col span={12}>\n//               {/* <Button className=\"tree-amount\" onClick={amountActive}>\n//                 40,000 riel\n//               </Button> */}\n//               <Form.Item name=\"tree\">\n//                 <Radio.Group>\n//                   <Radio.Button className=\"radio-button\" value={100}>\n//                     <span className=\"text-radio-button\">100 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//           </Row>\n//           <Form.Item name=\"tree\" label=\"Other Amount\" initialValue={20}>\n//             <Input\n//               rules={[\n//                 { required: true, message: \"Please Select or Input Amount\" },\n//               ]}\n//               className=\"input-amount\"\n//               id=\"tree-amount\"\n//               type=\"number\"\n//               placeholder=\"Other Amount\"\n//             />\n//           </Form.Item>\n//           <Divider />\n//         </div>\n//       </>\n//     );\n//   };\n//   const Step2Form = () => {\n//     return (\n//       <>\n//         <h2 style={{ textAlign: \"center\" }}>Detail</h2>\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"DISPLAY NAME\"\n//           name=\"name\"\n//           rules={[{ required: true, message: \"Please input your username!\" }]}\n//         >\n//           <Input />\n//         </Form.Item>\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"EMAIL ADDRESS\"\n//           name=\"email\"\n//           rules={[\n//             {\n//               required: true,\n//               message: \"Please input your email!\",\n//               type: \"email\",\n//             },\n//           ]}\n//         >\n//           <Input />\n//         </Form.Item>\n//         <Form.Item className=\"details-input\" label=\"MOBILE PHONE\" name=\"phone\">\n//           <Input />\n//         </Form.Item>\n//         <p>\n//           optional; by entering a phone number, you consent to receive text\n//           messages\n//         </p>\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"TEAM\"\n//           name=\"team\"\n//           rules={[{ required: true, message: \"Please input your team!\" }]}\n//         >\n//           <Input />\n//         </Form.Item>\n//         <p>optional</p>\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"MESSAGE\"\n//           name=\"user_message\"\n//           // rules={[{ required: true, message: \"Please input your message!\" }]}\n//         >\n//           <Input.TextArea />\n//         </Form.Item>\n//         <p>optional; for display on the website</p>\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"Select\"\n//           name=\"selectType\"\n//           rules={[{ required: true, message: \"Please selecet one!\" }]}\n//         >\n//           <Select>\n//             <Select.Option value=\"Plant trees & Forest Patrolling\">\n//               Plant trees & Forest Patrolling{\" \"}\n//             </Select.Option>\n//             <Select.Option value=\"School & Community Development\">\n//               School & Community Development\n//             </Select.Option>\n//             {/* <Select.Option value=\"Other\">Other</Select.Option> */}\n//           </Select>\n//         </Form.Item>\n//         <Form.Item\n//           className=\"details-input\"\n//           {...tailLayout}\n//           name=\"public\"\n//           valuePropName=\"checked\"\n//         >\n//           <Checkbox>\n//             {\" \"}\n//             <span style={{ color: \"#0cb04a\" }}> YES!</span> I want periodic\n//             updates on{\" \"}\n//             <a\n//               style={{ color: \"rgb(5, 118, 48)\" }}\n//               href=\"https://t.me/vitaminair\"\n//             >\n//               @VitaminAir\n//             </a>\n//           </Checkbox>\n//         </Form.Item>\n//         <Form.Item\n//           className=\"details-input\"\n//           {...tailLayout}\n//           name=\"anonymous\"\n//           valuePropName=\"checked\"\n//         >\n//           <Checkbox>Please keep my donation anonymous </Checkbox>\n//         </Form.Item>\n//       </>\n//     );\n//   };\n//   const steps = [\n//     {\n//       step: 1,\n//       title: \"First\",\n//       content: <Step1Form />,\n//     },\n//     {\n//       step: 2,\n//       title: \"Second\",\n//       content: <Step2Form />,\n//     },\n//   ];\n//   return (\n//     // <Step1Form>\n//     <div className=\"center\">\n//       <div className=\"container\">\n//         <div id=\"form\" className=\"form\">\n//           <Form\n//             form={form}\n//             style={{ textAlign: \"left\" }}\n//             {...layout}\n//             name=\"basic\"\n//             // initialValues={{ remember: true }}\n//             onFinish={onFinish}\n//             onFinishFailed={onFinishFailed}\n//           >\n//             {steps.map((item) => (\n//               <div\n//                 className={`steps-content ${\n//                   item.step !== current + 1 && \"hidden\"\n//                 }`}\n//               >\n//                 {item.content}\n//               </div>\n//               // <div className={`${item.step !== current + 1 && styles.hidden}`}>\n//               //   {item.content}\n//               // </div>\n//             ))}\n//             <div className=\"steps-action\">\n//               {current < steps.length - 1 && (\n//                 <div className=\"btn-position\">\n//                   <Button\n//                     htmlType=\"submit\"\n//                     onClick={next}\n//                     type=\"primary\"\n//                     className=\"next-btn\"\n//                   >\n//                     Next\n//                   </Button>\n//                 </div>\n//               )}\n//               {current === steps.length - 1 && (\n//                 <Form.Item {...tailLayout}>\n//                   <Button\n//                     type=\"primary\"\n//                     htmlType=\"submit\"\n//                     style={{ width: \"100%\" }}\n//                     className=\"next-btn\"\n//                   >\n//                     {loading ? (\n//                       <small>loading...</small>\n//                     ) : (\n//                       <small>SUMBIT</small>\n//                     )}\n//                   </Button>\n//                 </Form.Item>\n//               )}\n//               {current > 0 && (\n//                 <Button className=\"prev\" onClick={prev}>\n//                   Previous\n//                 </Button>\n//               )}\n//             </div>\n//           </Form>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default InfoForm;\nimport React, { useState } from \"react\";\nimport { Divider, Row, Col, Button, Input, Form, Checkbox, Select, Radio, message } from \"antd\";\nimport { DONATE_TREES } from \"../../graphql/mutaion\";\nimport { GET_DONATIONS, GET_MOST_DONATIONS } from \"../../graphql/query\";\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nfunction InfoForm() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      current = _useState[0],\n      setCurrent = _useState[1];\n\n  var _useMutation = useMutation(DONATE_TREES),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      donation = _useMutation2[0];\n\n  var _useQuery = useQuery(GET_DONATIONS),\n      refetch = _useQuery.refetch;\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useQuery2 = useQuery(GET_MOST_DONATIONS),\n      refetchMostDonation = _useQuery2.refetch;\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var next = function next(e) {\n    e.preventDefault();\n    setCurrent(current + 1);\n  }; //go to prev step in form\n\n\n  var prev = function prev(e) {\n    e.preventDefault();\n    setCurrent(current - 1);\n  }; //form\n\n\n  var layout = {\n    labelCol: {\n      span: 24\n    },\n    wrapperCol: {\n      span: 24\n    }\n  };\n  var tailLayout = {\n    wrapperCol: {\n      span: 24\n    }\n  };\n\n  var onFinish = function onFinish(values) {\n    var tree = values.tree;\n    donation({\n      variables: _objectSpread(_objectSpread({}, values), {}, {\n        // user_message: user_message === undefined ? \"\" : user_message,\n        // phone: phone === undefined ? \"No\" : phone,\n        tree: parseInt(tree)\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setLoading(true);\n                message.success(\"Donation Successful\");\n                _context.next = 4;\n                return refetch();\n\n              case 4:\n                _context.next = 6;\n                return refetchMostDonation();\n\n              case 6:\n                form.resetFields();\n                setLoading(false);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    console.log(values);\n  };\n\n  var onFinishFailed = function onFinishFailed(errorInfo) {\n    console.log(\"Failed:\", errorInfo);\n  }; //form steps\n\n\n  var Step1Form = function Step1Form() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"center\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"top-title\",\n            children: \"JOIN VitaminAir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"join-desc\",\n            children: \"Join VitaminAir to Plant trees and Educate the next generation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Row, {\n          gutter: [12, 12],\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 12,\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"tree\",\n              children: /*#__PURE__*/_jsxDEV(Radio.Group, {\n                children: /*#__PURE__*/_jsxDEV(Radio.Button, {\n                  className: \"radio-button\",\n                  value: 5,\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-radio-button\",\n                    children: \"5 trees\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 21\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 436,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 12,\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"tree\",\n              initialValue: 20,\n              children: /*#__PURE__*/_jsxDEV(Radio.Group, {\n                defaultValue: 20,\n                children: /*#__PURE__*/_jsxDEV(Radio.Button, {\n                  className: \"radio-button\",\n                  value: 20,\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-radio-button \",\n                    children: \"20 trees\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 21\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 12,\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"tree\",\n              children: /*#__PURE__*/_jsxDEV(Radio.Group, {\n                children: /*#__PURE__*/_jsxDEV(Radio.Button, {\n                  className: \"radio-button\",\n                  value: 50,\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-radio-button \",\n                    children: \"50 trees\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 21\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 12,\n            children: /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"tree\",\n              children: /*#__PURE__*/_jsxDEV(Radio.Group, {\n                children: /*#__PURE__*/_jsxDEV(Radio.Button, {\n                  className: \"radio-button\",\n                  value: 100,\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-radio-button \",\n                    children: \"100 trees\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 473,\n                    columnNumber: 21\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"tree\",\n          label: \"Other Amount\",\n          initialValue: 20,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            rules: [{\n              required: true,\n              message: \"Please Select or Input Amount\"\n            }],\n            className: \"input-amount\",\n            id: \"tree-amount\",\n            type: \"number\",\n            placeholder: \"Other Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false);\n  };\n\n  var Step2Form = function Step2Form() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Detail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        className: \"details-input\",\n        label: \"DISPLAY NAME\",\n        name: \"name\",\n        rules: [{\n          required: true,\n          message: \"Please input your username!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        className: \"details-input\",\n        label: \"EMAIL ADDRESS\",\n        name: \"email\",\n        rules: [{\n          required: true,\n          message: \"Please input your email!\",\n          type: \"email\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        className: \"details-input\",\n        label: \"MOBILE PHONE\",\n        name: \"phone\",\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"optional; by entering a phone number, you consent to receive text messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        className: \"details-input\",\n        label: \"TEAM\",\n        name: \"team\",\n        rules: [{\n          required: true,\n          message: \"Please input your team!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"optional\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        className: \"details-input\",\n        label: \"MESSAGE\",\n        name: \"user_message\" // rules={[{ required: true, message: \"Please input your message!\" }]}\n        ,\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"optional; for display on the website\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        className: \"details-input\",\n        label: \"Select\",\n        name: \"selectType\",\n        rules: [{\n          required: true,\n          message: \"Please selecet one!\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"Plant trees & Forest Patrolling\",\n            children: [\"Plant trees & Forest Patrolling\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"School & Community Development\",\n            children: \"School & Community Development\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, _objectSpread(_objectSpread({\n        className: \"details-input\"\n      }, tailLayout), {}, {\n        name: \"public\",\n        valuePropName: \"checked\",\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"#0cb04a\"\n            },\n            children: \" YES!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 13\n          }, _this), \" I want periodic updates on\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            style: {\n              color: \"rgb(5, 118, 48)\"\n            },\n            href: \"https://t.me/vitaminair\",\n            children: \"@VitaminAir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, _this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Form.Item, _objectSpread(_objectSpread({\n        className: \"details-input\"\n      }, tailLayout), {}, {\n        name: \"anonymous\",\n        valuePropName: \"checked\",\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          children: \"Please keep my donation anonymous \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 11\n        }, _this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var steps = [{\n    step: 1,\n    title: \"First\",\n    content: /*#__PURE__*/_jsxDEV(Step1Form, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 16\n    }, this)\n  }, {\n    step: 2,\n    title: \"Second\",\n    content: /*#__PURE__*/_jsxDEV(Step2Form, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 16\n    }, this)\n  }];\n  return (\n    /*#__PURE__*/\n    // <Step1Form>\n    _jsxDEV(\"div\", {\n      className: \"center container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"form\",\n        className: \"form\",\n        children: /*#__PURE__*/_jsxDEV(Form, _objectSpread(_objectSpread({\n          form: form,\n          style: {\n            textAlign: \"left\"\n          }\n        }, layout), {}, {\n          name: \"basic\" // initialValues={{ remember: true }}\n          ,\n          onFinish: onFinish,\n          onFinishFailed: onFinishFailed,\n          children: [steps.map(function (item) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"steps-content \".concat(item.step !== current + 1 && \"hidden\"),\n              children: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 13\n            }, _this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"steps-action\",\n            children: [current < steps.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn-position\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                htmlType: \"submit\",\n                onClick: next,\n                type: \"primary\",\n                className: \"next-btn\",\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 15\n            }, this), current === steps.length - 1 && /*#__PURE__*/_jsxDEV(Form.Item, _objectSpread(_objectSpread({}, tailLayout), {}, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                htmlType: \"submit\",\n                style: {\n                  width: \"100%\"\n                },\n                className: \"next-btn\",\n                children: loading ? /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"loading...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 30\n                }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"SUMBIT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 17\n              }, this)\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 15\n            }, this), current > 0 && /*#__PURE__*/_jsxDEV(Button, {\n              className: \"prev\",\n              onClick: prev,\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 11\n          }, this)]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(InfoForm, \"kVrpBIfLZjQn7H1TzLmFeQPr/NQ=\", false, function () {\n  return [useMutation, useQuery, useQuery, Form.useForm];\n});\n\n_c = InfoForm;\nexport default InfoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoForm\");","map":{"version":3,"sources":["/home/sovanden/projects/vitaminair.org/va-site/pages/home/inforForm.js"],"names":["React","useState","Divider","Row","Col","Button","Input","Form","Checkbox","Select","Radio","message","DONATE_TREES","GET_DONATIONS","GET_MOST_DONATIONS","useQuery","useMutation","InfoForm","current","setCurrent","donation","refetch","loading","setLoading","refetchMostDonation","useForm","form","next","e","preventDefault","prev","layout","labelCol","span","wrapperCol","tailLayout","onFinish","values","tree","variables","parseInt","then","res","success","resetFields","console","log","onFinishFailed","errorInfo","Step1Form","required","Step2Form","textAlign","type","color","steps","step","title","content","map","item","length","width"],"mappingsgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,OADF,EAEEC,GAFF,EAGEC,GAHF,EAIEC,MAJF,EAKEC,KALF,EAMEC,IANF,EAOEC,QAPF,EAQEC,MARF,EASEC,KATF,EAUEC,OAVF,QAWO,MAXP;AAYA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,qBAAlD;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAAA;;AAAA,kBACYhB,QAAQ,CAAC,CAAD,CADpB;AAAA,MACXiB,OADW;AAAA,MACFC,UADE;;AAAA,qBAECH,WAAW,CAACJ,YAAD,CAFZ;AAAA;AAAA,MAEXQ,QAFW;;AAAA,kBAGEL,QAAQ,CAACF,aAAD,CAHV;AAAA,MAGVQ,OAHU,aAGVA,OAHU;;AAAA,mBAIYpB,QAAQ,CAAC,KAAD,CAJpB;AAAA,MAIXqB,OAJW;AAAA,MAIFC,UAJE;;AAAA,mBAKuBR,QAAQ,CAACD,kBAAD,CAL/B;AAAA,MAKDU,mBALC,cAKVH,OALU;;AAAA,sBAOHd,IAAI,CAACkB,OAAL,EAPG;AAAA;AAAA,MAOXC,IAPW;;AAQlB,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,CAAD,EAAO;AAClBA,IAAAA,CAAC,CAACC,cAAF;AACAV,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,GAHD,CARkB,CAalB;;;AACA,MAAMY,IAAI,GAAG,SAAPA,IAAO,CAACF,CAAD,EAAO;AAClBA,IAAAA,CAAC,CAACC,cAAF;AACAV,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,GAHD,CAdkB,CAmBlB;;;AACA,MAAMa,MAAM,GAAG;AACbC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAE;AADE,KADG;AAIbC,IAAAA,UAAU,EAAE;AACVD,MAAAA,IAAI,EAAE;AADI;AAJC,GAAf;AAQA,MAAME,UAAU,GAAG;AACjBD,IAAAA,UAAU,EAAE;AACVD,MAAAA,IAAI,EAAE;AADI;AADK,GAAnB;;AAKA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAY;AAAA,QACnBC,IADmB,GACVD,MADU,CACnBC,IADmB;AAE3BlB,IAAAA,QAAQ,CAAC;AACPmB,MAAAA,SAAS,kCACJF,MADI;AAEP;AACA;AACAC,QAAAA,IAAI,EAAEE,QAAQ,CAACF,IAAD;AAJP;AADF,KAAD,CAAR,CAOGG,IAPH;AAAA,0EAOQ,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AACNnB,gBAAAA,UAAU,CAAC,IAAD,CAAV;AACAZ,gBAAAA,OAAO,CAACgC,OAAR,CAAgB,qBAAhB;AAFM;AAAA,uBAGAtB,OAAO,EAHP;;AAAA;AAAA;AAAA,uBAIAG,mBAAmB,EAJnB;;AAAA;AAKNE,gBAAAA,IAAI,CAACkB,WAAL;AACArB,gBAAAA,UAAU,CAAC,KAAD,CAAV;;AANM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPR;;AAAA;AAAA;AAAA;AAAA;AAeAsB,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACD,GAlBD;;AAoBA,MAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAe;AACpCH,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,SAAvB;AACD,GAFD,CArDkB,CAwDlB;;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,wBACE;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAI,YAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAG,YAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAOE,QAAC,GAAD;AAAK,UAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA,kCACE,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,EAAX;AAAA,mCAQE,QAAC,IAAD,CAAM,IAAN;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAA,qCACE,QAAC,KAAD,CAAO,KAAP;AAAA,uCACE,QAAC,KAAD,CAAO,MAAP;AAAc,kBAAA,SAAS,EAAC,cAAxB;AAAuC,kBAAA,KAAK,EAAE,CAA9C;AAAA,yCACE;AAAM,oBAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,mBADF,eAiBE,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,EAAX;AAAA,mCAIE,QAAC,IAAD,CAAM,IAAN;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAuB,cAAA,YAAY,EAAE,EAArC;AAAA,qCACE,QAAC,KAAD,CAAO,KAAP;AAAa,gBAAA,YAAY,EAAE,EAA3B;AAAA,uCACE,QAAC,KAAD,CAAO,MAAP;AAAc,kBAAA,SAAS,EAAC,cAAxB;AAAuC,kBAAA,KAAK,EAAE,EAA9C;AAAA,yCACE;AAAM,oBAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,mBAjBF,eA6BE,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,EAAX;AAAA,mCAIE,QAAC,IAAD,CAAM,IAAN;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAA,qCACE,QAAC,KAAD,CAAO,KAAP;AAAA,uCACE,QAAC,KAAD,CAAO,MAAP;AAAc,kBAAA,SAAS,EAAC,cAAxB;AAAuC,kBAAA,KAAK,EAAE,EAA9C;AAAA,yCACE;AAAM,oBAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,mBA7BF,eAyCE,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,EAAX;AAAA,mCAIE,QAAC,IAAD,CAAM,IAAN;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAA,qCACE,QAAC,KAAD,CAAO,KAAP;AAAA,uCACE,QAAC,KAAD,CAAO,MAAP;AAAc,kBAAA,SAAS,EAAC,cAAxB;AAAuC,kBAAA,KAAK,EAAE,GAA9C;AAAA,yCACE;AAAM,oBAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,mBAzCF;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPF,eA6DE,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,IAAI,EAAC,MAAhB;AAAuB,UAAA,KAAK,EAAC,cAA7B;AAA4C,UAAA,YAAY,EAAE,EAA1D;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,KAAK,EAAE,CACL;AAAEC,cAAAA,QAAQ,EAAE,IAAZ;AAAkBvC,cAAAA,OAAO,EAAE;AAA3B,aADK,CADT;AAIE,YAAA,SAAS,EAAC,cAJZ;AAKE,YAAA,EAAE,EAAC,aALL;AAME,YAAA,IAAI,EAAC,QANP;AAOE,YAAA,WAAW,EAAC;AAPd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,iBA7DF,eAwEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,iBAxEF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AA8ED,GA/ED;;AAgFA,MAAMwC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,wBACE;AAAA,8BACE;AAAI,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAGE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,KAAK,EAAC,cAFR;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,KAAK,EAAE,CAAC;AAAEF,UAAAA,QAAQ,EAAE,IAAZ;AAAkBvC,UAAAA,OAAO,EAAE;AAA3B,SAAD,CAJT;AAAA,+BAME,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAHF,eAYE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,KAAK,EAAC,eAFR;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,KAAK,EAAE,CACL;AACEuC,UAAAA,QAAQ,EAAE,IADZ;AAEEvC,UAAAA,OAAO,EAAE,0BAFX;AAGE0C,UAAAA,IAAI,EAAE;AAHR,SADK,CAJT;AAAA,+BAYE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA;AAAA;AAAA,eAZF,eA0BE,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,SAAS,EAAC,eAArB;AAAqC,QAAA,KAAK,EAAC,cAA3C;AAA0D,QAAA,IAAI,EAAC,OAA/D;AAAA,+BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eA1BF,eA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA7BF,eAkCE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,KAAK,EAAE,CAAC;AAAEH,UAAAA,QAAQ,EAAE,IAAZ;AAAkBvC,UAAAA,OAAO,EAAE;AAA3B,SAAD,CAJT;AAAA,+BAME,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAlCF,eA0CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA1CF,eA4CE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,IAAI,EAAC,cAHP,CAIE;AAJF;AAAA,+BAME,QAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eA5CF,eAoDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eApDF,eAsDE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,IAAI,EAAC,YAHP;AAIE,QAAA,KAAK,EAAE,CAAC;AAAEuC,UAAAA,QAAQ,EAAE,IAAZ;AAAkBvC,UAAAA,OAAO,EAAE;AAA3B,SAAD,CAJT;AAAA,+BAME,QAAC,MAAD;AAAA,kCACE,QAAC,MAAD,CAAQ,MAAR;AAAe,YAAA,KAAK,EAAC,iCAArB;AAAA,0DACkC,GADlC;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAIE,QAAC,MAAD,CAAQ,MAAR;AAAe,YAAA,KAAK,EAAC,gCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAtDF,eAsEE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,SAAS,EAAC;AADZ,SAEMwB,UAFN;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,aAAa,EAAC,SAJhB;AAAA,+BAME,QAAC,QAAD;AAAA,qBACG,GADH,eAEE;AAAM,YAAA,KAAK,EAAE;AAAEmB,cAAAA,KAAK,EAAE;AAAT,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,iCAGa,GAHb,eAIE;AACE,YAAA,KAAK,EAAE;AAAEA,cAAAA,KAAK,EAAE;AAAT,aADT;AAEE,YAAA,IAAI,EAAC,yBAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAtEF,eAwFE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,SAAS,EAAC;AADZ,SAEMnB,UAFN;AAGE,QAAA,IAAI,EAAC,WAHP;AAIE,QAAA,aAAa,EAAC,SAJhB;AAAA,+BAME,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAxFF;AAAA,oBADF;AAmGD,GApGD;;AAqGA,MAAMoB,KAAK,GAAG,CACZ;AACEC,IAAAA,IAAI,EAAE,CADR;AAEEC,IAAAA,KAAK,EAAE,OAFT;AAGEC,IAAAA,OAAO,eAAE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAHX,GADY,EAMZ;AACEF,IAAAA,IAAI,EAAE,CADR;AAEEC,IAAAA,KAAK,EAAE,QAFT;AAGEC,IAAAA,OAAO,eAAE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAHX,GANY,CAAd;AAYA;AAAA;AACE;AACA;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACE;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,SAAS,EAAC,MAAzB;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,IAAI,EAAEhC,IADR;AAEE,UAAA,KAAK,EAAE;AAAE0B,YAAAA,SAAS,EAAE;AAAb;AAFT,WAGMrB,MAHN;AAIE,UAAA,IAAI,EAAC,OAJP,CAKE;AALF;AAME,UAAA,QAAQ,EAAEK,QANZ;AAOE,UAAA,cAAc,EAAEW,cAPlB;AAAA,qBASGQ,KAAK,CAACI,GAAN,CAAU,UAACC,IAAD;AAAA,gCACT;AACE,cAAA,SAAS,0BACPA,IAAI,CAACJ,IAAL,KAActC,OAAO,GAAG,CAAxB,IAA6B,QADtB,CADX;AAAA,wBAKG0C,IAAI,CAACF;AALR;AAAA;AAAA;AAAA;AAAA,qBADS;AAAA,WAAV,CATH,eAkBE;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,uBACGxC,OAAO,GAAGqC,KAAK,CAACM,MAAN,GAAe,CAAzB,iBACC;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,qCACE,QAAC,MAAD;AACE,gBAAA,QAAQ,EAAC,QADX;AAEE,gBAAA,OAAO,EAAElC,IAFX;AAGE,gBAAA,IAAI,EAAC,SAHP;AAIE,gBAAA,SAAS,EAAC,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAaGT,OAAO,KAAKqC,KAAK,CAACM,MAAN,GAAe,CAA3B,iBACC,QAAC,IAAD,CAAM,IAAN,kCAAe1B,UAAf;AAAA,qCACE,QAAC,MAAD;AACE,gBAAA,IAAI,EAAC,SADP;AAEE,gBAAA,QAAQ,EAAC,QAFX;AAGE,gBAAA,KAAK,EAAE;AAAE2B,kBAAAA,KAAK,EAAE;AAAT,iBAHT;AAIE,gBAAA,SAAS,EAAC,UAJZ;AAAA,0BAMGxC,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,gBAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANzC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAdJ,EAyBGJ,OAAO,GAAG,CAAV,iBACC,QAAC,MAAD;AAAQ,cAAA,SAAS,EAAC,MAAlB;AAAyB,cAAA,OAAO,EAAEY,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAyDD;;GApTQb,Q;UAEYD,W,EACCD,Q,EAEqBA,Q,EAE1BR,IAAI,CAACkB,O;;;KAPbR,Q;AAsTT,eAAeA,QAAf","sourcesContent":["// import React, { useState } from \"react\";\n// import {\n//   Divider,\n//   Row,\n//   Col,\n//   Button,\n//   Input,\n//   Form,\n//   Checkbox,\n//   Select,\n//   Radio,\n//   message,\n// } from \"antd\";\n// // import styles from \"../../styles/Home.module.css\";\n// // import { DONATE_TREES } from \"../../graphql/mutaion\";\n// // import { GET_DONATIONS, GET_MOST_DONATIONS } from \"../../graphql/query\";\n// // import { useQuery, useMutation } from \"@apollo/client\";\n\n// function InfoForm() {\n//   const [current, setCurrent] = useState(0);\n//   //   const [donation] = useMutation(DONATE_TREES);\n//   //   const { refetch } = useQuery(GET_DONATIONS);\n//   const [loading, setLoading] = useState(false);\n//   //   const { refetch: refetchMostDonation } = useQuery(GET_MOST_DONATIONS);\n\n//   const [form] = Form.useForm();\n//   const next = (e) => {\n//     e.preventDefault();\n//     setCurrent(current + 1);\n//   };\n\n//   //go to prev step in form\n//   const prev = (e) => {\n//     e.preventDefault();\n//     setCurrent(current - 1);\n//   };\n\n//   //form\n//   const layout = {\n//     labelCol: {\n//       span: 24,\n//     },\n//     wrapperCol: {\n//       span: 24,\n//     },\n//   };\n//   const tailLayout = {\n//     wrapperCol: {\n//       span: 24,\n//     },\n//   };\n//   const onFinish = (values) => {\n//     // const { tree } = values;\n//     // donation({\n//     //   variables: {\n//     //     ...values,\n//     //     // user_message: user_message === undefined ? \"\" : user_message,\n//     //     // phone: phone === undefined ? \"No\" : phone,\n//     //     tree: parseInt(tree),\n//     //   },\n//     // }).then(async (res) => {\n//     //   setLoading(true);\n//     //   message.success(\"Donation Successful\");\n//     //   await refetch();\n//     //   await refetchMostDonation();\n//     //   form.resetFields();\n//     //   setLoading(false);\n//     // });\n//     console.log(values);\n//   };\n\n//   const onFinishFailed = (errorInfo) => {\n//     console.log(\"Failed:\", errorInfo);\n//   };\n//   //form steps\n\n//   const Step1Form = () => {\n//     return (\n//       <>\n//         <div>\n//           <center>\n//             <h2>JOIN VitaminAir</h2>\n//             <p className=\"join-desc\">\n//               Join VitaminAir to Plant trees and Educate the next generation.\n//             </p>\n//           </center>\n//           <Row gutter={[12, 12]}>\n//             <Col span={12}>\n//               {/* <Button\n//                   onChange={(e) => setValue(e.target.value)}\n//                   className=\"tree-amount\"\n//                   onClick={amountActive}\n//                 >\n//                   10,000 riel\n//                 </Button> */}\n//               <Form.Item name=\"tree\">\n//                 <Radio.Group>\n//                   <Radio.Button className=\"radio-button\" value={5}>\n//                     <span className=\"text-radio-button\">5 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//             <Col span={12}>\n//               {/* <Button className=\"tree-amount amount-active\" onClick={amountActive}>\n//                 20,000 riel\n//               </Button> */}\n//               <Form.Item name=\"tree\" initialValue={20}>\n//                 <Radio.Group defaultValue={20}>\n//                   <Radio.Button className=\"radio-button\" value={20}>\n//                     <span className=\"text-radio-button\">20 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//             <Col span={12}>\n//               {/* <Button className=\"tree-amount\" onClick={amountActive}>\n//                 30,000 riel\n//               </Button> */}\n//               <Form.Item name=\"tree\">\n//                 <Radio.Group>\n//                   <Radio.Button className=\"radio-button\" value={50}>\n//                     <span className=\"text-radio-button\">50 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//             <Col span={12}>\n//               {/* <Button className=\"tree-amount\" onClick={amountActive}>\n//                 40,000 riel\n//               </Button> */}\n//               <Form.Item name=\"tree\">\n//                 <Radio.Group>\n//                   <Radio.Button className=\"radio-button\" value={100}>\n//                     <span className=\"text-radio-button\">100 trees</span>\n//                   </Radio.Button>\n//                 </Radio.Group>\n//               </Form.Item>\n//             </Col>\n//           </Row>\n//           <Form.Item name=\"tree\" label=\"Other Amount\" initialValue={20}>\n//             <Input\n//               rules={[\n//                 { required: true, message: \"Please Select or Input Amount\" },\n//               ]}\n//               className=\"input-amount\"\n//               id=\"tree-amount\"\n//               type=\"number\"\n//               placeholder=\"Other Amount\"\n//             />\n//           </Form.Item>\n//           <Divider />\n//         </div>\n//       </>\n//     );\n//   };\n//   const Step2Form = () => {\n//     return (\n//       <>\n//         <h2 style={{ textAlign: \"center\" }}>Detail</h2>\n\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"DISPLAY NAME\"\n//           name=\"name\"\n//           rules={[{ required: true, message: \"Please input your username!\" }]}\n//         >\n//           <Input />\n//         </Form.Item>\n\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"EMAIL ADDRESS\"\n//           name=\"email\"\n//           rules={[\n//             {\n//               required: true,\n//               message: \"Please input your email!\",\n//               type: \"email\",\n//             },\n//           ]}\n//         >\n//           <Input />\n//         </Form.Item>\n//         <Form.Item className=\"details-input\" label=\"MOBILE PHONE\" name=\"phone\">\n//           <Input />\n//         </Form.Item>\n//         <p>\n//           optional; by entering a phone number, you consent to receive text\n//           messages\n//         </p>\n\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"TEAM\"\n//           name=\"team\"\n//           rules={[{ required: true, message: \"Please input your team!\" }]}\n//         >\n//           <Input />\n//         </Form.Item>\n//         <p>optional</p>\n\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"MESSAGE\"\n//           name=\"user_message\"\n//           // rules={[{ required: true, message: \"Please input your message!\" }]}\n//         >\n//           <Input.TextArea />\n//         </Form.Item>\n//         <p>optional; for display on the website</p>\n\n//         <Form.Item\n//           className=\"details-input\"\n//           label=\"Select\"\n//           name=\"selectType\"\n//           rules={[{ required: true, message: \"Please selecet one!\" }]}\n//         >\n//           <Select>\n//             <Select.Option value=\"Plant trees & Forest Patrolling\">\n//               Plant trees & Forest Patrolling{\" \"}\n//             </Select.Option>\n//             <Select.Option value=\"School & Community Development\">\n//               School & Community Development\n//             </Select.Option>\n//             {/* <Select.Option value=\"Other\">Other</Select.Option> */}\n//           </Select>\n//         </Form.Item>\n//         <Form.Item\n//           className=\"details-input\"\n//           {...tailLayout}\n//           name=\"public\"\n//           valuePropName=\"checked\"\n//         >\n//           <Checkbox>\n//             {\" \"}\n//             <span style={{ color: \"#0cb04a\" }}> YES!</span> I want periodic\n//             updates on{\" \"}\n//             <a\n//               style={{ color: \"rgb(5, 118, 48)\" }}\n//               href=\"https://t.me/vitaminair\"\n//             >\n//               @VitaminAir\n//             </a>\n//           </Checkbox>\n//         </Form.Item>\n//         <Form.Item\n//           className=\"details-input\"\n//           {...tailLayout}\n//           name=\"anonymous\"\n//           valuePropName=\"checked\"\n//         >\n//           <Checkbox>Please keep my donation anonymous </Checkbox>\n//         </Form.Item>\n//       </>\n//     );\n//   };\n//   const steps = [\n//     {\n//       step: 1,\n//       title: \"First\",\n//       content: <Step1Form />,\n//     },\n//     {\n//       step: 2,\n//       title: \"Second\",\n//       content: <Step2Form />,\n//     },\n//   ];\n//   return (\n//     // <Step1Form>\n//     <div className=\"center\">\n//       <div className=\"container\">\n//         <div id=\"form\" className=\"form\">\n//           <Form\n//             form={form}\n//             style={{ textAlign: \"left\" }}\n//             {...layout}\n//             name=\"basic\"\n//             // initialValues={{ remember: true }}\n//             onFinish={onFinish}\n//             onFinishFailed={onFinishFailed}\n//           >\n//             {steps.map((item) => (\n//               <div\n//                 className={`steps-content ${\n//                   item.step !== current + 1 && \"hidden\"\n//                 }`}\n//               >\n//                 {item.content}\n//               </div>\n//               // <div className={`${item.step !== current + 1 && styles.hidden}`}>\n//               //   {item.content}\n//               // </div>\n//             ))}\n//             <div className=\"steps-action\">\n//               {current < steps.length - 1 && (\n//                 <div className=\"btn-position\">\n//                   <Button\n//                     htmlType=\"submit\"\n//                     onClick={next}\n//                     type=\"primary\"\n//                     className=\"next-btn\"\n//                   >\n//                     Next\n//                   </Button>\n//                 </div>\n//               )}\n//               {current === steps.length - 1 && (\n//                 <Form.Item {...tailLayout}>\n//                   <Button\n//                     type=\"primary\"\n//                     htmlType=\"submit\"\n//                     style={{ width: \"100%\" }}\n//                     className=\"next-btn\"\n//                   >\n//                     {loading ? (\n//                       <small>loading...</small>\n//                     ) : (\n//                       <small>SUMBIT</small>\n//                     )}\n//                   </Button>\n//                 </Form.Item>\n//               )}\n//               {current > 0 && (\n//                 <Button className=\"prev\" onClick={prev}>\n//                   Previous\n//                 </Button>\n//               )}\n//             </div>\n//           </Form>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default InfoForm;\n\nimport React, { useState } from \"react\";\nimport {\n  Divider,\n  Row,\n  Col,\n  Button,\n  Input,\n  Form,\n  Checkbox,\n  Select,\n  Radio,\n  message,\n} from \"antd\";\nimport { DONATE_TREES } from \"../../graphql/mutaion\";\nimport { GET_DONATIONS, GET_MOST_DONATIONS } from \"../../graphql/query\";\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nfunction InfoForm() {\n  const [current, setCurrent] = useState(0);\n  const [donation] = useMutation(DONATE_TREES);\n  const { refetch } = useQuery(GET_DONATIONS);\n  const [loading, setLoading] = useState(false);\n  const { refetch: refetchMostDonation } = useQuery(GET_MOST_DONATIONS);\n\n  const [form] = Form.useForm();\n  const next = (e) => {\n    e.preventDefault();\n    setCurrent(current + 1);\n  };\n\n  //go to prev step in form\n  const prev = (e) => {\n    e.preventDefault();\n    setCurrent(current - 1);\n  };\n\n  //form\n  const layout = {\n    labelCol: {\n      span: 24,\n    },\n    wrapperCol: {\n      span: 24,\n    },\n  };\n  const tailLayout = {\n    wrapperCol: {\n      span: 24,\n    },\n  };\n  const onFinish = (values) => {\n    const { tree } = values;\n    donation({\n      variables: {\n        ...values,\n        // user_message: user_message === undefined ? \"\" : user_message,\n        // phone: phone === undefined ? \"No\" : phone,\n        tree: parseInt(tree),\n      },\n    }).then(async (res) => {\n      setLoading(true);\n      message.success(\"Donation Successful\");\n      await refetch();\n      await refetchMostDonation();\n      form.resetFields();\n      setLoading(false);\n    });\n    console.log(values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n  //form steps\n\n  const Step1Form = () => {\n    return (\n      <>\n        <div>\n          <center>\n            <h2 className=\"top-title\">JOIN VitaminAir</h2>\n            <p className=\"join-desc\">\n              Join VitaminAir to Plant trees and Educate the next generation.\n            </p>\n          </center>\n          <Row gutter={[12, 12]}>\n            <Col span={12}>\n              {/* <Button\n                  onChange={(e) => setValue(e.target.value)}\n                  className=\"tree-amount\"\n                  onClick={amountActive}\n                >\n                  10,000 riel\n                </Button> */}\n              <Form.Item name=\"tree\">\n                <Radio.Group>\n                  <Radio.Button className=\"radio-button\" value={5}>\n                    <span className=\"text-radio-button\">5 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              {/* <Button className=\"tree-amount amount-active\" onClick={amountActive}>\n                20,000 riel\n              </Button> */}\n              <Form.Item name=\"tree\" initialValue={20}>\n                <Radio.Group defaultValue={20}>\n                  <Radio.Button className=\"radio-button\" value={20}>\n                    <span className=\"text-radio-button \">20 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              {/* <Button className=\"tree-amount\" onClick={amountActive}>\n                30,000 riel\n              </Button> */}\n              <Form.Item name=\"tree\">\n                <Radio.Group>\n                  <Radio.Button className=\"radio-button\" value={50}>\n                    <span className=\"text-radio-button \">50 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              {/* <Button className=\"tree-amount\" onClick={amountActive}>\n                40,000 riel\n              </Button> */}\n              <Form.Item name=\"tree\">\n                <Radio.Group>\n                  <Radio.Button className=\"radio-button\" value={100}>\n                    <span className=\"text-radio-button \">100 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item name=\"tree\" label=\"Other Amount\" initialValue={20}>\n            <Input\n              rules={[\n                { required: true, message: \"Please Select or Input Amount\" },\n              ]}\n              className=\"input-amount\"\n              id=\"tree-amount\"\n              type=\"number\"\n              placeholder=\"Other Amount\"\n            />\n          </Form.Item>\n          <Divider />\n        </div>\n      </>\n    );\n  };\n  const Step2Form = () => {\n    return (\n      <>\n        <h2 style={{ textAlign: \"center\" }}>Detail</h2>\n\n        <Form.Item\n          className=\"details-input\"\n          label=\"DISPLAY NAME\"\n          name=\"name\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          className=\"details-input\"\n          label=\"EMAIL ADDRESS\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your email!\",\n              type: \"email\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item className=\"details-input\" label=\"MOBILE PHONE\" name=\"phone\">\n          <Input />\n        </Form.Item>\n        <p>\n          optional; by entering a phone number, you consent to receive text\n          messages\n        </p>\n\n        <Form.Item\n          className=\"details-input\"\n          label=\"TEAM\"\n          name=\"team\"\n          rules={[{ required: true, message: \"Please input your team!\" }]}\n        >\n          <Input />\n        </Form.Item>\n        <p>optional</p>\n\n        <Form.Item\n          className=\"details-input\"\n          label=\"MESSAGE\"\n          name=\"user_message\"\n          // rules={[{ required: true, message: \"Please input your message!\" }]}\n        >\n          <Input.TextArea />\n        </Form.Item>\n        <p>optional; for display on the website</p>\n\n        <Form.Item\n          className=\"details-input\"\n          label=\"Select\"\n          name=\"selectType\"\n          rules={[{ required: true, message: \"Please selecet one!\" }]}\n        >\n          <Select>\n            <Select.Option value=\"Plant trees & Forest Patrolling\">\n              Plant trees & Forest Patrolling{\" \"}\n            </Select.Option>\n            <Select.Option value=\"School & Community Development\">\n              School & Community Development\n            </Select.Option>\n            {/* <Select.Option value=\"Other\">Other</Select.Option> */}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          className=\"details-input\"\n          {...tailLayout}\n          name=\"public\"\n          valuePropName=\"checked\"\n        >\n          <Checkbox>\n            {\" \"}\n            <span style={{ color: \"#0cb04a\" }}> YES!</span> I want periodic\n            updates on{\" \"}\n            <a\n              style={{ color: \"rgb(5, 118, 48)\" }}\n              href=\"https://t.me/vitaminair\"\n            >\n              @VitaminAir\n            </a>\n          </Checkbox>\n        </Form.Item>\n        <Form.Item\n          className=\"details-input\"\n          {...tailLayout}\n          name=\"anonymous\"\n          valuePropName=\"checked\"\n        >\n          <Checkbox>Please keep my donation anonymous </Checkbox>\n        </Form.Item>\n      </>\n    );\n  };\n  const steps = [\n    {\n      step: 1,\n      title: \"First\",\n      content: <Step1Form />,\n    },\n    {\n      step: 2,\n      title: \"Second\",\n      content: <Step2Form />,\n    },\n  ];\n  return (\n    // <Step1Form>\n    <div className=\"center container\">\n      <div id=\"form\" className=\"form\">\n        <Form\n          form={form}\n          style={{ textAlign: \"left\" }}\n          {...layout}\n          name=\"basic\"\n          // initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          {steps.map((item) => (\n            <div\n              className={`steps-content ${\n                item.step !== current + 1 && \"hidden\"\n              }`}\n            >\n              {item.content}\n            </div>\n          ))}\n          <div className=\"steps-action\">\n            {current < steps.length - 1 && (\n              <div className=\"btn-position\">\n                <Button\n                  htmlType=\"submit\"\n                  onClick={next}\n                  type=\"primary\"\n                  className=\"next-btn\"\n                >\n                  Next\n                </Button>\n              </div>\n            )}\n            {current === steps.length - 1 && (\n              <Form.Item {...tailLayout}>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  style={{ width: \"100%\" }}\n                  className=\"next-btn\"\n                >\n                  {loading ? <small>loading...</small> : <small>SUMBIT</small>}\n                </Button>\n              </Form.Item>\n            )}\n            {current > 0 && (\n              <Button className=\"prev\" onClick={prev}>\n                Previous\n              </Button>\n            )}\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default InfoForm;\n"]},"metadata":{},"sourceType":"module"}