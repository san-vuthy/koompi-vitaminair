[{"/home/sovanden/projects/koompi-vitaminair/client/src/index.js":"1","/home/sovanden/projects/koompi-vitaminair/client/src/App.js":"2","/home/sovanden/projects/koompi-vitaminair/client/src/components/index.js":"3","/home/sovanden/projects/koompi-vitaminair/client/src/components/Navbar.js":"4","/home/sovanden/projects/koompi-vitaminair/client/src/components/Project.js":"5","/home/sovanden/projects/koompi-vitaminair/client/src/components/Footer.js":"6","/home/sovanden/projects/koompi-vitaminair/client/src/components/About.js":"7","/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/Home.js":"8","/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/Activities.js":"9","/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/InfoForm.js":"10","/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/Leaderboard.js":"11","/home/sovanden/projects/koompi-vitaminair/client/src/graphql/query.js":"12","/home/sovanden/projects/koompi-vitaminair/client/src/graphql/mutaion.js":"13"},{"size":469,"mtime":1614419600122,"results":"14","hashOfConfig":"15"},{"size":559,"mtime":1614419047616,"results":"16","hashOfConfig":"15"},{"size":227,"mtime":1614419047630,"results":"17","hashOfConfig":"15"},{"size":1828,"mtime":1614419047616,"results":"18","hashOfConfig":"15"},{"size":3075,"mtime":1614419047616,"results":"19","hashOfConfig":"15"},{"size":1169,"mtime":1614419047616,"results":"20","hashOfConfig":"15"},{"size":8452,"mtime":1614419047616,"results":"21","hashOfConfig":"15"},{"size":1777,"mtime":1614419047616,"results":"22","hashOfConfig":"15"},{"size":6950,"mtime":1614419600122,"results":"23","hashOfConfig":"15"},{"size":8876,"mtime":1614419465387,"results":"24","hashOfConfig":"15"},{"size":5270,"mtime":1614419047616,"results":"25","hashOfConfig":"15"},{"size":373,"mtime":1614419047630,"results":"26","hashOfConfig":"15"},{"size":554,"mtime":1614419047630,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"oy0cii",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/home/sovanden/projects/koompi-vitaminair/client/src/index.js",[],["58","59"],"/home/sovanden/projects/koompi-vitaminair/client/src/App.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/index.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/Navbar.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/Project.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/Footer.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/About.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/Home.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/Activities.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/InfoForm.js",["60"],"import React, { useState } from \"react\"\nimport {\n  Divider,\n  Row,\n  Col,\n  Button,\n  Input,\n  Form,\n  Checkbox,\n  Select,\n  Radio,\n  message,\n} from \"antd\"\nimport { DONATE_TREES } from \"../../graphql/mutaion\"\nimport { GET_DONATIONS, GET_MOST_DONATIONS } from \"../../graphql/query\"\nimport { useQuery, useMutation } from \"@apollo/client\"\n\nfunction InfoForm() {\n  const [current, setCurrent] = useState(0)\n  const [donation] = useMutation(DONATE_TREES)\n  const { refetch } = useQuery(GET_DONATIONS)\n  const { refetch: refetchMostDonation } = useQuery(GET_MOST_DONATIONS)\n\n  const [form] = Form.useForm()\n  const next = (e) => {\n    e.preventDefault()\n    setCurrent(current + 1)\n  }\n\n  //go to prev step in form\n  const prev = (e) => {\n    e.preventDefault()\n    setCurrent(current - 1)\n  }\n\n  const amountActive = (e) => {\n    e.preventDefault()\n    // console.log(e.target.parentElement)\n    const btns = Array.from(document.getElementsByClassName(\"tree-amount\"))\n    console.log(btns)\n    console.log(e.target)\n    btns.forEach((btn) => {\n      if (btn === e.target) {\n        btn.className += \" amount-active\"\n      } else if (btn === e.target.parentElement) {\n        btn.className += \" amount-active\"\n      } else {\n        btn.className = \"tree-amount\"\n      }\n    })\n  }\n  //form\n  const layout = {\n    labelCol: {\n      span: 24,\n    },\n    wrapperCol: {\n      span: 24,\n    },\n  }\n  const tailLayout = {\n    wrapperCol: {\n      span: 24,\n    },\n  }\n  const onFinish = (values) => {\n    const { tree } = values\n    donation({\n      variables: {\n        ...values,\n        tree: parseInt(tree),\n      },\n    }).then(async (res) => {\n      message.success(\" Donation Successful\")\n      await refetch()\n      await refetchMostDonation()\n      form.resetFields()\n    })\n    console.log(values)\n  }\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo)\n  }\n  //form steps\n\n  const Step1Form = () => {\n    return (\n      <>\n        <div>\n          <center>\n            <h2 className=\"top-title\">JOIN VitaminAir</h2>\n            <p className=\"join-desc\">$1 plants a tree</p>\n          </center>\n          <Row gutter={[12]}>\n            <Col span={12}>\n              {/* <Button\n                  onChange={(e) => setValue(e.target.value)}\n                  className=\"tree-amount\"\n                  onClick={amountActive}\n                >\n                  10,000 riel\n                </Button> */}\n              <Form.Item name=\"tree\">\n                <Radio.Group>\n                  <Radio.Button className=\"radio-button\" value={5}>\n                    <span className=\"text-radio-button\">5 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              {/* <Button className=\"tree-amount amount-active\" onClick={amountActive}>\n                20,000 riel\n              </Button> */}\n              <Form.Item name=\"tree\" initialValue={20}>\n                <Radio.Group defaultValue={20}>\n                  <Radio.Button className=\"radio-button\" value={20}>\n                    <span className=\"text-radio-button \">20 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              {/* <Button className=\"tree-amount\" onClick={amountActive}>\n                30,000 riel\n              </Button> */}\n              <Form.Item name=\"tree\">\n                <Radio.Group>\n                  <Radio.Button className=\"radio-button\" value={50}>\n                    <span className=\"text-radio-button \">50 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              {/* <Button className=\"tree-amount\" onClick={amountActive}>\n                40,000 riel\n              </Button> */}\n              <Form.Item name=\"tree\">\n                <Radio.Group>\n                  <Radio.Button className=\"radio-button\" value={100}>\n                    <span className=\"text-radio-button \">100 trees</span>\n                  </Radio.Button>\n                </Radio.Group>\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item name=\"tree\" initialValue={20} label=\"Other Amount\">\n            <Input\n              rules={[{ required: true, message: \"Please Select or Input Amount\" }]}\n              className=\"input-amount\"\n              id=\"tree-amount\"\n              type=\"number\"\n              placeholder=\"Other Amount\"\n            />\n          </Form.Item>\n          <Divider />\n        </div>\n      </>\n    )\n  }\n  const Step2Form = () => {\n    return (\n      <>\n        <h2>Detail</h2>\n\n        <Form.Item\n          label=\"DISPLAY NAME\"\n          name=\"name\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"EMAIL ADDRESS\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your email!\",\n              type: \"email\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"MOBILE PHONE\"\n          name=\"phone\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Phone Number!\",\n            },\n          ]}\n          // rules={[{ type: \"number\" }]}\n        >\n          <Input />\n        </Form.Item>\n        <p>\n          optional; by entering a phone number, you consent to receive text messages\n        </p>\n        <Form.Item\n          label=\"TEAM\"\n          name=\"team\"\n          rules={[{ required: true, message: \"Please input your team!\" }]}\n        >\n          <Input />\n        </Form.Item>\n        <p>optional</p>\n        <Form.Item\n          label=\"MESSAGE\"\n          name=\"user_message\"\n          rules={[{ required: true, message: \"Please input your message!\" }]}\n        >\n          <Input.TextArea />\n        </Form.Item>\n        <p>optional; for display on the website</p>\n        <Form.Item\n          label=\"Select\"\n          name=\"selectType\"\n          rules={[{ required: true, message: \"Please selecet one!\" }]}\n        >\n          <Select>\n            <Select.Option value=\"Tree\">Tree</Select.Option>\n            <Select.Option value=\"School\">School</Select.Option>\n            <Select.Option value=\"Other\">Other</Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item {...tailLayout} name=\"public\" valuePropName=\"checked\">\n          <Checkbox>\n            {\" \"}\n            <span style={{ color: \"#0cb04a\" }}> YES!</span> I want periodic updates\n            on #TeamTrees{\" \"}\n          </Checkbox>\n        </Form.Item>\n        <Form.Item {...tailLayout} name=\"anonymous\" valuePropName=\"checked\">\n          <Checkbox>Please keep my donation anonymous </Checkbox>\n        </Form.Item>\n      </>\n    )\n  }\n  const steps = [\n    {\n      step: 1,\n      title: \"First\",\n      content: <Step1Form />,\n    },\n    {\n      step: 2,\n      title: \"Second\",\n      content: <Step2Form />,\n    },\n  ]\n  return (\n    // <Step1Form>\n    <div className=\"center container\">\n      <div id=\"form\" className=\"form\">\n        <Form\n          form={form}\n          style={{ textAlign: \"left\" }}\n          {...layout}\n          name=\"basic\"\n          // initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          {steps.map((item) => (\n            <div\n              className={`steps-content ${item.step !== current + 1 && \"hidden\"}`}\n            >\n              {item.content}\n            </div>\n          ))}\n          <div className=\"steps-action\">\n            {current < steps.length - 1 && (\n              // <Button type=\"primary\" onClick={() => next()}>\n              //   Next\n              // </Button>\n              <div className=\"btn-position\">\n                <Button\n                  htmlType=\"submit\"\n                  onClick={next}\n                  type=\"primary\"\n                  className=\"next-btn\"\n                >\n                  Next\n                </Button>\n              </div>\n            )}\n            {current === steps.length - 1 && (\n              <Form.Item {...tailLayout}>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  style={{ width: \"100%\" }}\n                  className=\"next-btn\"\n                >\n                  Submit\n                </Button>\n              </Form.Item>\n            )}\n            {current > 0 && (\n              <Button className=\"prev\" onClick={prev}>\n                Previous\n              </Button>\n            )}\n          </div>\n        </Form>\n      </div>\n    </div>\n  )\n}\n\nexport default InfoForm\n","/home/sovanden/projects/koompi-vitaminair/client/src/components/Home/Leaderboard.js",["61"],"// import React from 'react'\nimport { Row, Col, Input, Button, TreeSelect } from \"antd\"\nimport { FaSearch } from \"react-icons/fa\"\nimport { useQuery } from \"@apollo/client\"\nimport { GET_DONATIONS, GET_MOST_DONATIONS } from \"../../graphql/query\"\nimport moment from \"moment\"\nimport { useState } from \"react\"\nfunction Leaderboard() {\n  const [value, setValue] = useState(\"recent\")\n  //=====get Data==========\n  const { loading, data: donateData, error } = useQuery(GET_DONATIONS)\n  const {\n    loading: lodingMostDonate,\n    data: mostDonateData,\n    error: errorMostDonate,\n  } = useQuery(GET_MOST_DONATIONS)\n  if (loading || lodingMostDonate) return null\n  if (error || errorMostDonate) return `Error! ${error.message}`\n  console.log(donateData)\n  const active = (e) => {\n    const recents = document.getElementById(\"most-recents\")\n    const trees = document.getElementById(\"most-trees\")\n    if (e.target.id === \"most-recents\") {\n      trees.className = \"clicked\"\n      recents.className = \"\"\n      recents.style.zIndex = 2\n      trees.style.zIndex = 1\n      setValue(\"recent\")\n    } else if (e.target.id === \"most-trees\") {\n      recents.className = \"clicked\"\n      trees.className = \"\"\n      trees.style.zIndex = 2\n      recents.style.zIndex = 1\n      setValue(\"most\")\n    }\n  }\n  return (\n    <div style={{ marginTop: \"50px\" }}>\n      <h1>LEADERBOARD</h1>\n      <Row align=\"middle\" justify=\"center\">\n        <Col className=\"search-box gutter-row\">\n          <Input className=\"search\" type=\"text\" placeholder=\"Search\" />\n          <FaSearch className=\"fa-search\" />\n        </Col>\n        <Col offset={1} className=\"gutter-row\">\n          <button value=\"recent\" id=\"most-recents\" onClick={active}>\n            Most Recents\n          </button>\n          <button value=\"most\" id=\"most-trees\" className=\"clicked\" onClick={active}>\n            Most Trees\n          </button>\n        </Col>\n      </Row>\n      {value === \"recent\" ? (\n        <div className=\"container user-list\">\n          {donateData.get_donations.map((res) => {\n            const { tree, name, anonymous, create_at, user_message } = res\n            console.log(anonymous)\n            return (\n              <Row className=\"list\" align=\"middle\">\n                <Col\n                  className=\"avatar\"\n                  xs={{ span: 24 }}\n                  sm={{ span: 2 }}\n                  md={{ span: 1 }}\n                >\n                  <img src=\"/images/list-images/icon1.svg\" alt=\"\" />\n                </Col>\n                <Col flex=\"auto\">\n                  <p className=\"list-title\">\n                    {anonymous === false ? name : \"Anonymous\"}\n                  </p>\n                  <p className=\"list-message\">{user_message}</p>\n                </Col>\n                <Col xs={{ span: 24 }} sm={{ span: 24, offset: 3 }} md={{ span: 7 }}>\n                  <p>\n                    {tree === 1 ? (\n                      <p className=\"badge\">{tree} tree</p>\n                    ) : (\n                      <p className=\"badge\">{tree} trees</p>\n                    )}\n                  </p>\n\n                  <p className=\"list-message\">\n                    {moment.unix(create_at / 1000).format(\" Do YYYY, h:mm:ss A\")}\n                  </p>\n                </Col>\n              </Row>\n            )\n          })}\n          <a href=\"#form\">\n            <Button className=\"add-tree-btn\">ADD YOUR TREE</Button>\n          </a>\n        </div>\n      ) : (\n        <div className=\"container user-list\">\n          {mostDonateData.get_most_trees.map((res) => {\n            const { tree, name, anonymous, create_at, user_message } = res\n            console.log(anonymous)\n            return (\n              <Row className=\"list\" align=\"middle\">\n                <Col\n                  className=\"avatar\"\n                  xs={{ span: 24 }}\n                  sm={{ span: 2 }}\n                  md={{ span: 1 }}\n                >\n                  <img src=\"/images/list-images/icon1.svg\" alt=\"\" />\n                </Col>\n                <Col flex=\"auto\">\n                  <p className=\"list-title\">\n                    {anonymous === false ? name : \"Anonymous\"}\n                  </p>\n                  <p className=\"list-message\">{user_message}</p>\n                </Col>\n                <Col xs={{ span: 24 }} sm={{ span: 24, offset: 3 }} md={{ span: 7 }}>\n                  <p>\n                    {tree === 1 ? (\n                      <p className=\"badge\">{tree} tree</p>\n                    ) : (\n                      <p className=\"badge\">{tree} trees</p>\n                    )}\n                  </p>\n\n                  <p className=\"list-message\">\n                    {/* {moment.unix(create_at / 1000).format(\"YYYY-MM-DD\")}, */}\n                    {moment.unix(create_at / 1000).format(\" Do YYYY, h:mm:ss A\")}\n                  </p>\n                </Col>\n              </Row>\n            )\n          })}\n          <a href=\"#form\">\n            <Button className=\"add-tree-btn\">ADD YOUR TREE</Button>\n          </a>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Leaderboard\n// import React from \"react\"\n// import TestForm from \"./testForm\"\n\n// const Leaderboard = () => {\n//   return (\n//     <div>\n//       <TestForm />\n//     </div>\n//   )\n// }\n\n// export default Leaderboard\n","/home/sovanden/projects/koompi-vitaminair/client/src/graphql/query.js",[],"/home/sovanden/projects/koompi-vitaminair/client/src/graphql/mutaion.js",[],["62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":36,"column":9,"nodeType":"70","messageId":"71","endLine":36,"endColumn":21},{"ruleId":"68","severity":1,"message":"72","line":2,"column":35,"nodeType":"70","messageId":"71","endLine":2,"endColumn":45},{"ruleId":"64","replacedBy":"73"},{"ruleId":"66","replacedBy":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'amountActive' is assigned a value but never used.","Identifier","unusedVar","'TreeSelect' is defined but never used.",["75"],["76"],"no-global-assign","no-unsafe-negation"]